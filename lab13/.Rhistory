box(title = "Plot Options", width = 3,
radioButtons("x", "Select Ethnicity",
choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International"),
radioButtons("y", "Select Campus",
choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"), selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR, fill=Ethnicity))+
geom_col(color="black", alpha=0.75)+
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by ethnicity across all UC campuses"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Ethnicity",
choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International"),
radioButtons("y", "Select Campus",
choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"), selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR, fill=Ethnicity))+
geom_col(color="black", alpha=0.75)+
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by ethnicity across all UC campuses"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Ethnicity",
choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International"),
radioButtons("y", "Select Campus",
choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"), selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR, fill=Academic_Yr))+
geom_col(color="black", alpha=0.75)+
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by ethnicity across all UC campuses"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Ethnicity",
choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International"),
radioButtons("y", "Select Campus",
choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"), selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR, fill=FilteredCountFR))+
geom_col(color="black", alpha=0.75)+
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
?iris
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in 1:ncol(iris3)) {                              # Head of for-loop
if(str_detect(colnames(iris3)[i], "Width")) {        # Logical condition
iris3[ , i] <- iris3[ , i] * 10                    # Code block
}
}
library(tidyverse)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 0                               # Create running index
repeat{                              # Start
i <- i + 1                         # Update running index
if(!is.numeric(iris1[ , i])) {     # Break condition
break
}
iris1[ , i] <- iris1[ , i] * 10    # Change data
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1                                            # Create index
while(is.numeric(iris2[ , i])) {                  # Start of while-loop
iris2[ , i] <- iris2[ , i] * 10                 # Code block
i <- i + 1
}
head(iris2)                                       # Showing head of updated data
for (i in 1:10) {
print(i^2)
}
data1 <- data                       # Replicate example data
for(i in 1:ncol(data1)) {           # for-loop over columns
data1[ , i] <- data1[ , i] + 10
}
data1
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
for(i in 1:ncol(iris3)) {                              # Head of for-loop
if(str_detect(colnames(iris3)[i], "Width")) {        # Logical condition
iris3[ , i] <- iris3[ , i] * 10                    # Code block
}
}
head(iris3)
list.files("data/locations")
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(version = "3.12")
# BiocManager::install()                             # To install core packages
# BiocManager::install(c("ShortRead", "Biostrings")) # Install specific packages
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
data_files2 <- list.files("data/archaea-dna")
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
# install.packages("devtools")
# library(devtools)
# devtools::install_github("dkahle/ggmap")
# install.packages("albersusa")
# devtools::install_github("hrbrmstr/albersusa")
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80)
long <- c(-124.1, -115.5)
bbox <- make_bbox(long, lat, f = 0.05) # slightly expand the bounding box
map2 <- get_map(bbox, source = "stamen", maptype = "watercolor")
ggmap(map2)
map1 <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude),size = 2, color = "red", alpha = 0.3) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size = 2, alpha = 0.4) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
library(albersusa)
us_comp <- usa_sf() # get a composite map of the USA
us_comp
cnty_comp <- counties_sf() # get a composite map of USA counties
cnty_comp
ggplot() +
geom_sf(data = us_comp, size = 0.125) +
theme_linedraw()+
labs(title = "USA State Boundaries")
ca_comp <- us_comp %>%
filter(name=="California")
ca_cnty_comp <- cnty_comp %>%
filter(state=="California")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggsave(filename = "map.svg", device = "svg", plot = uso_map, height = 5, width = 7)
spiders2 <- spiders %>%
mutate(locality_cave = if_else(str_detect(locality, "Cave"), "troglo", "epig"))
spiders2
str(spiders2)
spiders2$locality_cave<-as.factor(spiders2$locality_cave)
str(spiders2)
spiders2 %>% ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(aes(x = longitude, y = latitude, color = locality_cave, shape = locality_cave))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(1.2, 0.3))
map2 <- get_map(bbox, source = "stamen", maptype = "osm")
map2 <- get_map(bbox, source = "osm", maptype = "toner")
ggmap(map2)
(map <- get_map(source = "stamen", maptype = "watercolor"))
(map <- get_map(source = "stamen", maptype = "terrain"))
myMap <- get_map(location=myLocation, source=“osm", color=“bw”)
myMap <- get_map(location=myLocation, source="osm", color=“bw”)
myMap <- get_map(location=myLocation, source="osm", color="bw")
myMap <- get_map(location=Davis, source="osm", color="bw")
myMap <- get_map(location=bbox, source="osm", color="bw")
ggmap(myMap)
map <- get_map(source = "stamen", maptype = "terrain")
map <- get_map(location=bbox, source = "stamen", maptype = "watercolor")
ggmap(map)
install.packages("osmdata")
library(osmdata)
#install.packages("osmdata")
#library(osmdata)
sac_map <- get_map(getbb("Sacramento"), maptype = "toner-background")
ggmap(sac_map)
map2 <- get_map(bbox, source = "osm", maptype = "toner")
ggmap(map2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
runApp('Q3_homerange.R')
runApp('Q3_homerange.R')
runApp('Q3_homerange.R')
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point(size=input$pointsize, alpha=0.8) + theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
names(gabon)
glimpse(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('uc_admit_1.R')
runApp('Q3_homerange.R')
runApp('Q3_homerange.R')
runApp('Q3_homerange.R')
