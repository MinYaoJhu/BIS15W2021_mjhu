gc_content
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
base_freq
gc_content
list.files()
list.files("archaea-dna")
data_files2 <- list.files("archaea-dna")
data_files2
data_files2 <- list.files("archaea-dna")
data_files2
for (i in 1:length(data_files2)){
reads <- readFasta(data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
results$file_name[i] <- data_files2[i]
results$gc_content[i] <- gc_content
}
data_files2 <- list.files("archaea-dna")
data_files2
for (i in 1:length(data_files2)){
reads <- readFasta("archaea-dna/"data_files2[i])
data_files2 <- list.files("archaea-dna")
data_files2
for (i in 1:length(data_files2)){
reads <- readFasta("archaea-dna/data_files2[i]")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
results$file_name[i] <- data_files2[i]
results$gc_content[i] <- gc_content
}
data_files2 <- list.files("archaea-dna")
data_files2
for (i in 1:length(data_files2)){
reads <- readFasta("archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
results$file_name[i] <- data_files2[i]
results$gc_content[i] <- gc_content
}
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
GC_results
data_files2 <- list.files("archaea-dna")
data_files2
for (i in 1:length(data_files2)){
reads <- readFasta("archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,    # Create example data
x2 = 6:10,
x3 = 11:15)
data
data4 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data4[ , i] <- data4[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data4
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
data(iris)                          # Loading exemplifying data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 0                               # Create running index
repeat{                              # Start
i <- i + 1                         # Update running index
if(!is.numeric(iris1[ , i])) {     # Break condition
break
}
iris1[ , i] <- iris1[ , i] * 10    # Change data
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                   # Replicate example data
data2
i <- 1                          # Create running index
while(i <= 2) {                  # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
data(iris)                                        # Loading exemplifying data set
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1                                            # Create index
while(is.numeric(iris2[ , i])) {                  # Start of while-loop
iris2[ , i] <- iris2[ , i] * 10                 # Code block
i <- i + 1
}
head(iris2)                                       # Showing head of updated data
install.packages(c("broom", "htmltools", "pillar", "rlang", "tibble", "xfun"))
library(tidyverse)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
data(iris)                          # Loading exemplifying data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 0                               # Create running index
repeat{                              # Start
i <- i + 1                         # Update running index
if(!is.numeric(iris1[ , i])) {     # Break condition
break
}
iris1[ , i] <- iris1[ , i] * 10    # Change data
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
data(iris)                                        # Loading exemplifying data set
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1                                            # Create index
while(is.numeric(iris2[ , i])) {                  # Start of while-loop
iris2[ , i] <- iris2[ , i] * 10                 # Code block
i <- i + 1
}
head(iris2)                                       # Showing head of updated data
for (i in 1:10) {
print(i^2)
}
x <- c(1,2,5,3,10,9,8,11,6)
count <- 0
for (i in x) {
if(i %% 2 == 0)
print(i)
}
for (i in x) {
if(i %% 2 == 0)
count = count+1
}
print(count)
random_number <- sample(1:1000, size = 100)
random_number
for (i in random_number) {
if(i %% 2 == 0)
count = count+1
}
print(count)
data1 <- data # Replicate example data
for(i in 1:ncol(data1)) {       # for-loop over columns
data1[ , i] <- data1[ , i] + 10
}
data1
data2 <- data                   # Replicate example data
for(i in 1:nrow(data2)) {       # for-loop over rows
data2[i, ] <- data2[i, ] - 100
}
data2
data(iris)                                                 # Loading iris flower data set
head(iris)                                                 # Inspecting iris flower data set
str(iris)
#?iris
iris1 <- iris                                          # Replicate iris data set
for(i in 1:ncol(iris1)) {                              # Head of for-loop
if(str_detect(colnames(iris1)[i], "Width")) {        # Logical condition
iris1[ , i] <- iris1[ , i] * 10                    # Code block
}
}
head(iris1)
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files()
data_files <- list.files(pattern = "locations-2*",
full.names = TRUE)
data_files
results <- vector(mode = "integer", length = length(data_files))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(c("ShortRead", "Biostrings"))
library(ShortRead)
library(Biostrings)
reads <- readFasta("archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
base_freq
gc_content
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
library(tidyverse)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
data(iris)                          # Loading exemplifying data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 0                               # Create running index
repeat{                              # Start
i <- i + 1                         # Update running index
if(!is.numeric(iris1[ , i])) {     # Break condition
break
}
iris1[ , i] <- iris1[ , i] * 10    # Change data
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
data(iris)                                        # Loading exemplifying data set
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris                                     # Replicate example data
i <- 1                                            # Create index
while(is.numeric(iris2[ , i])) {                  # Start of while-loop
iris2[ , i] <- iris2[ , i] * 10                 # Code block
i <- i + 1
}
head(iris2)                                       # Showing head of updated data
for (i in 1:10) {
print(i^2)
}
x <- c(1,2,5,3,10,9,8,11,6)
count <- 0
for (i in x) {
if(i %% 2 == 0)
print(i)
}
for (i in x) {
if(i %% 2 == 0)
count = count+1
}
print(count)
random_number <- sample(1:1000, size = 100)
random_number
for (i in random_number) {
if(i %% 2 == 0)
count = count+1
}
print(count)
data1 <- data # Replicate example data
for(i in 1:ncol(data1)) {       # for-loop over columns
data1[ , i] <- data1[ , i] + 10
}
data1
data2 <- data                   # Replicate example data
for(i in 1:nrow(data2)) {       # for-loop over rows
data2[i, ] <- data2[i, ] - 100
}
data2
data(iris)                                                 # Loading iris flower data set
head(iris)                                                 # Inspecting iris flower data set
str(iris)
#?iris
iris1 <- iris                                          # Replicate iris data set
for(i in 1:ncol(iris1)) {                              # Head of for-loop
if(str_detect(colnames(iris1)[i], "Width")) {        # Logical condition
iris1[ , i] <- iris1[ , i] * 10                    # Code block
}
}
head(iris1)
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files()
data_files <- list.files(pattern = "locations-2*",
full.names = TRUE)
data_files
results <- vector(mode = "integer", length = length(data_files))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install()
#BiocManager::install(c("ShortRead", "Biostrings"))
library(ShortRead)
library(Biostrings)
reads <- readFasta("archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
base_freq
gc_content
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
data_files2 <- list.files("archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
GC_results
for (i in 1:length(data_files2)){
reads <- readFasta("archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
library(tidyverse)
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files()
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files()
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files("data")
#download.file("http://www.datacarpentry.org/semester-biology/data/locations.zip", "locations.zip")
#unzip("locations.zip")
list.files("data/locations")
data_files <- list.files("data/locations", pattern = "locations-2*",
full.names = TRUE)
data_files
results <- vector(mode = "integer", length = length(data_files))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
results
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
base_freq
gc_content
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files2 <- list.files("data/archaea-dna")
data_files2
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
GC_results
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
library(ShortRead)
library(Biostrings)
reads <- readFasta("data/archaea-dna/a-saccharovorans.fasta")
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
base_freq
str(base_freq)
data_files2 <- list.files("data/archaea-dna")
GC_results <- data.frame(file_name = vector(mode = "character", length = length(data_files2)),
gc_content = vector(mode = "integer", length = length(data_files2)))
for (i in 1:length(data_files2)){
reads <- readFasta("data/archaea-dna",data_files2[i])
seq <- sread(reads)
base_freq <- alphabetFrequency(seq)
gc_content <- (base_freq[1, "G"] + base_freq[1, "C"]) / sum(base_freq) * 100
GC_results$file_name[i] <- data_files2[i]
GC_results$gc_content[i] <- gc_content
}
GC_results
